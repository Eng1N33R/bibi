import re
import time
import json
import random
import datetime
import sys
import traceback

from config import config
import sheets
import vk_api

class State:
    def __init__(self):
        try:
            with open('data.json') as fh:
                self.state = json.load(fh)
        except FileNotFoundError:
            self.state = {}
    
    def get(self, address, throw=False, default=None):
        """Recursive deep get for the state object.

        `address` is specified as a slash-delimited (/) string.

        If `throw` is `True`, throws an exception if any part of the address
        doesn't exist. Otherwise, returns `default` and sets the address to
        that value using {#set}.
        """
        comps = address.split('/')
        try:
            cursor = self.state[comps[0]]
        except Exception as e:
            if throw:
                raise e
            else:
                self.set(address, default)
                return default
        i = 1
        while i < len(comps)-2:
            try:
                cursor = cursor[comps[i]]
            except Exception as e:
                if throw:
                    raise e
                else:
                    self.set(address, default)
                    return default
            i += 1
        try:
            return cursor[comps[len(comps)-1]]
        except Exception as e:
            if throw:
                raise e
            else:
                self.set(address, default)
                return default

    def set(self, address, value):
        """Recursive deep set for the state object.

        `address` is specified as a slash-delimited (/) string.
        """
        comps = address.split('/')
        try:
            cursor = self.state[comps[0]]
        except:
            cursor = {}
            self.state[comps[0]] = cursor
        i = 1
        while i < len(comps)-2:
            try:
                cursor = cursor[comps[i]]
            except:
                cursor[comps[i]] = {}
                cursor = cursor[comps[i]]
            i += 1
        try:
            cursor[comps[len(comps)-1]] = value
        except:
            cursor = {comps[len(comps)-1]: value}
            cursor[comps[len(comps)-1]] = cursor
    
    def save(self):
        with open('data.json', 'w') as fh:
            json.dump(self.state, fh)

class Context:
    def __init__(self, user_id):
        self.user_id = user_id
        try:
            self.context = memory['context'][user_id]
        except:
            self.context = {}
            memory['context'][user_id] = self.context
    
    def get(self, address):
        return memory['context'][self.user_id][address]
    
    def set(self, address, value):
        memory['context'][self.user_id][address] = value

state = State()
memory = {'seconds_counter': 0, 'context': {}}

vk = vk_api.VkApi(token=config['VK_TOKEN'])
sheets.acquire_auth()
# All other acquire_auth calls are commented for now to see how Google behaves

tasks = {}
def task(txt):
    return lambda f: tasks.setdefault(txt, f)

final_name_pattern = re.compile(r'(\w+).?$')

@task((r'.*?—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã', r'.*?—Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã'))
def process_student_list(user_id, txt):
    #sheets.acquire_auth()
    values = sheets.get_range_values('–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã!A3:B')
    name_list = []
    for row in values:
        name_list.append('%s. %s' % (row[0], row[1]))
    say(user_id, 'üë´ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã:\n\n' + '\n'.join(name_list))

@task((r'–∫–∞–∫–æ–π —É –º–µ–Ω—è –≤–∞—Ä–∏–∞–Ω—Ç', r'.*?–º–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'))
def process_student_selfnumber(user_id, txt):
    global state
    try:
        name = state.get('names/%d' % user_id, throw=True)
    except:
        response = vk.method('users.get', {'user_ids': user_id, 'fields': 'last_name'})
        name = response[0]['last_name']
    #sheets.acquire_auth()
    values = sheets.get_range_values('–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã!A3:G')
    for row in values:
        if row[6] == name:
            say(user_id, 'üî¢ –¢–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî¬†‚Ññ%s!' % (row[0]))
            return
    say(user_id, '‚ùó –í –≥—Ä—É–ø–ø–µ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç —Å —Ñ–∞–º–∏–ª–∏–µ–π %s! –ú–æ–∂–µ—Ç, —Ç—ã —Å–∏–¥–∏—à—å –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º? '
        '–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏ ¬´–º–æ—è —Ñ–∞–º–∏–ª–∏—è –•¬ª, –∏ —è –∑–∞–ø–æ–º–Ω—é —Ç–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º.' % (name))

@task((r'–∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É', r'–≤–∞—Ä–∏–∞–Ω—Ç'))
def process_student_othernumber(user_id, txt):
    global state
    name = final_name_pattern.search(txt).group(1)
    if name == '–º–µ–Ω—è':
        return process_student_selfnumber(user_id, txt)

    name = name[:1].upper() + name[1:]
    #sheets.acquire_auth()
    values = sheets.get_range_values('–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã!A3:G')
    for row in values:
        if row[6][:len(row[6])-4] in name:
            say(user_id, 'üî¢ %s: –≤–∞—Ä–∏–∞–Ω—Ç ‚Ññ%s' % (row[6], row[0]))
            return
    say(user_id, '‚ùó –í –≥—Ä—É–ø–ø–µ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç —Å —Ñ–∞–º–∏–ª–∏–µ–π %s! –¢—ã —Ç–æ—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ—ë —É–∫–∞–∑–∞–ª?' % (name))

@task((r'–º–æ—è —Ñ–∞–º–∏–ª–∏—è', r'–º–µ–Ω—è –∑–æ–≤—É—Ç'))
def process_student_alias(user_id, txt):
    global state
    name = final_name_pattern.search(txt).group(1)
    name = name[:1].upper() + name[1:]
    print('recording alias %s for user ID %d' % (name, user_id))
    state.set('names/%d' % (user_id), name)
    say(user_id, 'üë§ –ó–∞–ø–æ–º–Ω–∏–ª–∞ —Ç–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º!')

@task((r'–∫–∞–∫–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ —É', r'–∫–∞–∫ –∑–æ–≤—É—Ç'))
def process_student_patronymic(user_id, txt):
    global state
    #sheets.acquire_auth()
    name = final_name_pattern.search(txt).group(1)
    name = name[:1].upper() + name[1:]
    values = sheets.get_range_values('–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã!A3:G')
    for row in values:
        if row[6][:len(row[6])-4] in name:
            full_name = row[1]
            say(user_id, '‚úí %s' % (full_name))
            return
    say(user_id, '‚ùó –í –≥—Ä—É–ø–ø–µ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç —Å —Ñ–∞–º–∏–ª–∏–µ–π %s! –¢—ã —Ç–æ—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ—ë —É–∫–∞–∑–∞–ª?' % (name))

@task((r'—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å', r'–∫–∞–∫( \w+)? –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', r'.*?–ø–æ–º–æ—â—å', r'.*?—Ö(–µ|—ç)–ª–ø', r'.*?help'))
def process_help(user_id, txt):
    say(user_id, '‚ùì –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
        '‚û° "—Å –∫–∞–∫–æ–π –∑–∞–≤—Ç—Ä–∞" ‚Äî¬†–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –ø–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞\n'
        '‚û° "–∫–∞–∫–∏–µ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä—ã" ‚Äî¬†–ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n'
        '‚û° "–∫–∞–∫–æ–π —É –º–µ–Ω—è –≤–∞—Ä–∏–∞–Ω—Ç" ‚Äî¬†–ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–Ω–æ–º–µ—Ä –ø–æ —Å–ø–∏—Å–∫—É)\n'
        '‚û° "—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã" ‚Äî¬†–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ–π –≥—Ä—É–ø–ø—ã\n'
        '‚û° "–∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É <—Ñ–∞–º–∏–ª–∏—è>" ‚Äî¬†–ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç (–Ω–æ–º–µ—Ä –ø–æ —Å–ø–∏—Å–∫—É) –¥—Ä—É–≥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞\n'
        '‚û° "–∫–∞–∫ –∑–æ–≤—É—Ç <—Ñ–∞–º–∏–ª–∏—è>" ‚Äî¬†–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n'
        '‚û° "–∫—Ç–æ —Ç—ã" ‚Äî¬†–ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ\n'
        '\n'
        '–Ø –Ω–µ —Å–æ–≤—Å–µ–º –≥–ª—É–ø–∞—è –∏ –ø–æ–Ω–∏–º–∞—é —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã —Å–∫–∞–∂–µ—à—å –∏—Ö –Ω–µ–º–Ω–æ–≥–æ –∏–Ω–∞—á–µ, –Ω–æ —è –µ—â—ë —Ç–æ–ª—å–∫–æ —É—á—É—Å—å!'
        '\n'
        '–ï—Å–ª–∏ —è —Ä–∞–±–æ—Ç–∞—é –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –ò–ª—å–µ –ì–∞–≤—Ä–∏–∫–æ–≤—É (–ò–ª—å—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π). '
        '–ë—É–¥—É –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–∞!'
    )

@task((r'—Å–ø–∞—Å–∏–±–æ', r'—Å–ø—Å', r'—Å—è–±', r'—Å–µ–Ω–∫—Å', r'–ø–∞—Å–∏–±'))
def process_thanks(user_id, txt):
    replies = [
        '–ù–µ –∑–∞ —á—Ç–æ üòä',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ',
        '–û–±—Ä–∞—â–∞–π—Å—è üòâ'
    ]
    say(user_id, random.choice(replies))

def get_schedule_for_day(day, denom):
    #sheets.acquire_auth()
    offset = 2 if denom else 0
    values = sheets.get_range_values('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!A4:H28')
    processing = False
    schedule = []
    row_i = 0
    for row in values:
        if processing:
            row_i += 1
        if len(row) == 0:
            continue
        if (row[0].startswith('wd')):
            if (row[0] == 'wd%d' % (day)):
                processing = True
            else:
                if processing:
                    processing = False
                    break
            continue
        if processing:
            if row[1+offset] != '':
                schedule.append((row_i, row[1+offset], row[5], row[6]))
    return schedule

day_pattern = re.compile(r'–≤–æ? (\w+)', re.U)
def get_day_by_name(txt):
    day_search = day_pattern.search(txt.lower())
    try:
        day = day_search.group(1)
    except:
        return None

    days = ('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥',
            '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
    if day in days:
        dayindex = days.index(day) + 1
    else:
        return None
    return (dayindex, days[dayindex-1])

def get_denom_now():
    #sheets.acquire_auth()
    return sheets.get_cell_value('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!H2') == 'TRUE'

def get_relative_schedule(day):
    if day == None:
        return (-1)
    if day[0] in (6, 7):
        return (-2)

    today = datetime.datetime.today() - datetime.timedelta(hours=3)
    wd = today.weekday()+1
    denom_now = get_denom_now()
    denom_tgt = not denom_now if wd > day[0] and wd not in (
        6, 7) else denom_now

    return get_schedule_for_day(day[0], denom_tgt)

def get_class_index(time):
    schedule = sheets.get_range_values('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ!E39:G44')
    for row in schedule:
        if time == row[1]:
            return int(row[0])
    return None

@task((r'–∫–∞–∫–∏–µ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä—ã', r'–ø–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞', r'.*?—á—Ç–æ –∑–∞ –ø–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞'))
def process_schedule_tomorrow(user_id, txt):
    today = datetime.datetime.today() - datetime.timedelta(hours=3)
    wd = today.weekday()+1
    if wd in (5, 6):
        say(user_id, 'üïë –ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! üòÉ')
        return
    tomorrow = 1 if wd == 7 else wd+1
    schedule = get_schedule_for_day(tomorrow, get_denom_now())
    class_list = [ '%s‚Äî%s | %s' % (day[2], day[3], day[1]) for day in schedule ]
    say(user_id, 'üìÖ –ó–∞–≤—Ç—Ä–∞ –±—É–¥—É—Ç —Ç–∞–∫–∏–µ –ø–∞—Ä—ã:\n\n%s' % ('\n'.join(class_list)))

@task((r'(—Å|–∫) –∫–∞–∫–æ–π –∑–∞–≤—Ç—Ä–∞', r'(—Å–æ|–∫) —Å–∫–æ–ª—å–∫–∏ –∑–∞–≤—Ç—Ä–∞'))
def process_arrival_tomorrow(user_id, txt):
    today = datetime.datetime.today() - datetime.timedelta(hours=3)
    wd = today.weekday()+1
    if wd in (5, 6):
        say(user_id, 'üïë –ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! üòÉ')
        return
    tomorrow = 1 if wd == 7 else wd+1
    schedule = get_schedule_for_day(tomorrow, get_denom_now())
    class_index = get_class_index(schedule[0][2])
    if class_index == 0:
        say(user_id, 'üïë –ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –ø–∞—Ä!')
    words = ('–∫ –ø–µ—Ä–≤–æ–π', '–∫–æ –≤—Ç–æ—Ä–æ–π', '–∫ —Ç—Ä–µ—Ç—å–µ–π',
             '–∫ —á–µ—Ç–≤—ë—Ä—Ç–æ–π', '–∫ –ø—è—Ç–æ–π', '–∫ —à–µ—Å—Ç–æ–π')
    say(user_id, 'üïë –ó–∞–≤—Ç—Ä–∞ %s (%s)!' % (words[class_index-1], schedule[0][2]))

@task((r'—Å–∫–æ–ª—å–∫–æ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä', r'—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –∑–∞–≤—Ç—Ä–∞'))
def process_classes_tomorrow(user_id, txt):
    #sheets.acquire_auth()
    today = datetime.datetime.today() - datetime.timedelta(hours=3)
    wd = today.weekday()+1
    if wd in (5, 6):
        say(user_id, 'üïë –ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! üòÉ')
        return
    tomorrow = 1 if wd == 7 else wd+1

    schedule = get_schedule_for_day(tomorrow, get_denom_now())
    n = len(schedule)
    words = ('–Ω–µ—Ç –ø–∞—Ä', '–æ–¥–Ω–∞ –ø–∞—Ä–∞', '–¥–≤–µ –ø–∞—Ä—ã', '—Ç—Ä–∏ –ø–∞—Ä—ã',
             '—á–µ—Ç—ã—Ä–µ –ø–∞—Ä—ã', '–ø—è—Ç—å –ø–∞—Ä', '—à–µ—Å—Ç—å –ø–∞—Ä')
    say(user_id, 'üïë –ó–∞–≤—Ç—Ä–∞ %s!' % (words[n]))

@task((r'.*?–∫–∞–∫–∏–µ –ø–∞—Ä—ã –≤–æ? (\w+)', r'–ø–∞—Ä—ã –≤–æ? (\w+)', r'.*?—á—Ç–æ –∑–∞ –ø–∞—Ä—ã –≤–æ? (\w+)'))
def process_schedule_day(user_id, txt):
    day = get_day_by_name(txt)
    schedule = get_relative_schedule(day)
    if schedule[0] == -1:
        return say(user_id, 'ü§∑‚Äç‚ôÄÔ∏è –ù–µ –ø–æ–Ω—è–ª–∞, –æ –∫–∞–∫–æ–º —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –¥–Ω–µ. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    if schedule[0] == -2:
        return say(user_id, 'üïë –≠—Ç–æ –Ω–µ—É—á–µ–±–Ω—ã–π –¥–µ–Ω—å!')

    class_list = ['%s‚Äî%s | %s' % (day[2], day[3], day[1]) for day in schedule]
    say(user_id, 'üìÖ –í%s %s –±—É–¥—É—Ç —Ç–∞–∫–∏–µ –ø–∞—Ä—ã:\n\n%s' %
        ('–æ' if day[0] == 2 else '', day[1], '\n'.join(class_list)))

@task((r'(—Å|–∫) –∫–∞–∫–æ–π –≤–æ? (\w+)', r'(—Å–æ|–∫) —Å–∫–æ–ª—å–∫–∏ –≤–æ? (\w+)'))
def process_arrival_day(user_id, txt):
    day = get_day_by_name(txt)
    schedule = get_relative_schedule(day)
    if schedule[0] == -1:
        return say(user_id, 'ü§∑‚Äç‚ôÄÔ∏è –ù–µ –ø–æ–Ω—è–ª–∞, –æ –∫–∞–∫–æ–º —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –¥–Ω–µ. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    if schedule[0] == -2:
        return say(user_id, 'üïë –≠—Ç–æ –Ω–µ—É—á–µ–±–Ω—ã–π –¥–µ–Ω—å!')

    class_index = get_class_index(schedule[0][2])
    words = ('–∫ –ø–µ—Ä–≤–æ–π', '–∫–æ –≤—Ç–æ—Ä–æ–π', '–∫ —Ç—Ä–µ—Ç—å–µ–π',
             '–∫ —á–µ—Ç–≤—ë—Ä—Ç–æ–π', '–∫ –ø—è—Ç–æ–π', '–∫ —à–µ—Å—Ç–æ–π')
    say(user_id, 'üïë –í%s %s %s (%s)!' %
        ('–æ' if day[0] == 2 else '', day[1], words[class_index-1], schedule[0][2]))

@task((r'—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –≤–æ? (\w+)'))
def process_classes_day(user_id, txt):
    #sheets.acquire_auth()
    day = get_day_by_name(txt)
    schedule = get_relative_schedule(day)
    if schedule[0] == -1:
        return say(user_id, 'ü§∑‚Äç‚ôÄÔ∏è –ù–µ –ø–æ–Ω—è–ª–∞, –æ –∫–∞–∫–æ–º —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –¥–Ω–µ. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    if schedule[0] == -2:
        return say(user_id, 'üïë –≠—Ç–æ –Ω–µ—É—á–µ–±–Ω—ã–π –¥–µ–Ω—å!')

    n = len(schedule)
    words = ('–Ω–µ—Ç –ø–∞—Ä', '–æ–¥–Ω–∞ –ø–∞—Ä–∞', '–¥–≤–µ –ø–∞—Ä—ã', '—Ç—Ä–∏ –ø–∞—Ä—ã',
             '—á–µ—Ç—ã—Ä–µ –ø–∞—Ä—ã', '–ø—è—Ç—å –ø–∞—Ä', '—à–µ—Å—Ç—å –ø–∞—Ä')
    say(user_id, 'üïë –í%s %s %s!' %
        ('–æ' if day[0] == 2 else '', day[1], words[n]))

@task((r'–∫—Ç–æ —Ç—ã', r'—Ç—ã –∫—Ç–æ'))
def process_easteregg_introduction(user_id, txt):
    say(user_id,
        'üôã‚Äç‚ôÄÔ∏è –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–∏–±–∏ (—É–¥–∞—Ä–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–≥). –ú–æ—ë –∏–º—è –Ω–∏–∫–∞–∫ –Ω–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –æ–Ω–æ —Å–æ–∑–≤—É—á–Ω–æ —Å –ë–ò ‚Äî —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –æ—Ç '
        '¬´–±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞¬ª. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ? –ù–µ –∑–Ω–∞—é, –Ω–µ –º–Ω–µ —Å—É–¥–∏—Ç—å. –ë—ã—Ç—å –º–æ–∂–µ—Ç, –æ–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´—Ç—ë—Ç—è¬ª –Ω–∞ –ø–µ—Ä—Å–∏–¥—Å–∫–æ–º, –∏–ª–∏ ¬´—è –ø–∏–ª–∞¬ª –Ω–∞ –ª–∞—Ç—ã–Ω–∏ ‚Äî –∫—Ç–æ –∑–Ω–∞–µ—Ç?\n\n'

        'üéì –Ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ú–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤, —Å–æ–≥–ª–∞—Å–Ω–∞, –Ω–æ –ø–æ —Å—É—Ç–∏ —è –ø–æ–º–æ–≥–∞—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ —Ç–∞–∫–æ–º '
        '–∑–∞–ø—É—Ç–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º –≤—É–∑–µ. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.\n\n'

        'üõ† –Ø –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª —Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–µ, —á—Ç–æ —è –æ—à–∏–±—É—Å—å –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–∫–∞–∂—É. –ù–µ –∑–ª–∏—Å—å –Ω–∞ –º–µ–Ω—è ‚Äî¬†—è '
        '–µ—â—ë —É—á—É—Å—å –∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–≥—É —Å–∞–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ª—É—á—à–µ —Å–æ–æ–±—â–∏ –æ–± –æ—à–∏–±–∫–µ –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (–ò–ª—å—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π) ‚Äî –æ–Ω –µ—ë '
        '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç.\n\n'

        'üí¨ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –ø–æ–Ω–∏–º–∞—é —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏, –∫–æ–Ω–µ—á–Ω–æ, —Ç—ã –ø–∏—à–µ—à—å –±–æ–ª–µ–µ-–º–µ–Ω–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ üòâ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∏ '
        '–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–∫–∞–∂–∏ –º–Ω–µ ¬´—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å¬ª, –∏ —è –æ—Ç–≤–µ—á—É. –ù–∞–¥–µ—é—Å—å, —è –±—É–¥—É —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω–∞! üòä')

@task((r'–ø—Ä–∏–≤–µ—Ç', r'—Ö–∞–π', r'–∫—É(\)|!|.|\(|\?)+$', r'–¥–∞—Ä–æ–≤', r'–∑–¥–æ—Ä–æ–≤', r'–¥—Ä–∞—Ç—É—Ç–∏'))
def process_easteregg_hi(user_id, txt):
    say(user_id, '–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç üôÇ')

@task((r'–ø–æ–∫–∞', r'–±–∞–π', r'–±–±', r'–¥–æ—Å–≤–∏–¥–æ—Å', r'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è'))
def process_easteregg_bye(user_id, txt):
    say(user_id, '–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏ üòâ')

@task((r'–∏–∑–≤–∏–Ω–∏', r'—Å–æ—Ä+(–∏|—å|—è–Ω)'))
def process_easteregg_sorry(user_id, txt):
    say(user_id, '–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–µ–Ω—å–∫–æ–≥–æ üë®üèø')

@task((r'–º–æ–ª–æ–¥–µ—Ü'))
def process_easteregg_goodjob(user_id, txt):
    say(user_id, '–°–ø–∞—Å–∏–±–æ! ‚ô•')

@task((r'—Å–∏+', r'si+', r's√¨+'))
def process_meme_si(user_id, txt):
    replies = [
        'Il signore √® italiano? Che sorpresa!',
        'Ah, il classico!',
        'Lasciatemi cantare... üé∂',
        'Assolutamente corretto.'
    ]
    say(user_id, 'üáÆüáπ %s' % (random.choice(replies)))

@task((r'—è+ –∑–¥–µ+—Å—å', r'.*?–¥(–æ|–∞)–ª–±(–æ|–∞)(–µ|—ë)–±', r'–¥–∞( |-)?–¥–∞ ?—è'))
def process_meme_yazdes(user_id, txt):
    replies = [
        '–î–∞, –¥–∞, —è, –¥–∞.',
        '–ù—É —à–æ –≤—ã –¥–µ–¥–∞ –¥—Ä–∞–∑–Ω–∏—Ç–µ?',
        '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, —è –ë–∏–±–∏, –º–Ω–µ —Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å –ª–µ—Ç –∏ —è –ø–æ–ª—å–∑—É—é—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞.',
        '–î–∞ —ç—Ç–æ –≤—Å—ë –±—Ä–∞—Ç –º–æ–π, –¥–µ–±–∏–ª.'
    ]
    say(user_id, 'üßì %s' % (random.choice(replies)))

@task((r'.*?–≥–ª—é—Ç–µ–Ω'))
def process_meme_gluten(user_id, txt):
    replies = [
        '–°–æ–≥–ª–∞—Å–Ω–æ –£–∫–∞–∑—É –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ú–æ—Å–∫–æ–ª—å—Ü–æ–≤—Å–∫–æ–π —Ä–µ—Å–ø—É–±–ª–∏–∫–∏ –î–∞–Ω–∏–∏–ª–∞ –®–∏—Ä–∏–Ω–∞, –≤—Å–µ –≥–ª—é—Ç–µ–Ω–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–±–ª–∞–≥–∞—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –Ω–∞–ª–æ–≥–æ–º –≤ 13,5%.',
        '–î–∞ –ª–∞–¥–Ω–æ, –≤—Å–µ–≥–æ –∫—É—Å–æ—á–µ–∫ —Ö–ª–µ–±–∞, —á–µ–≥–æ —Ç–µ–±–µ –æ—Ç –Ω–µ–≥–æ –±—É–¥–µ—Ç?',
        '–≠—Ç–æ —Ç–µ–±–µ, –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω–µ–ª—å–∑—è —Ö–ª–µ–±? –ê —á—ë—Ä–Ω—ã–π? –ê —Ç–æ—Å—Ç—ã? –ê —Å—É—Ö–∞—Ä–∏–∫–∏? –ê –º—è—Å–æ –≤ –∫–ª—è—Ä–µ? –ê –≤ –ø–∞–Ω–∏—Ä–æ–≤–∫–µ?..',
        '–ì–ª—é—Ç–µ–Ω–æ–≤–æ–µ –Ω–µ–±–æ, –≥–ª—é—Ç–µ–Ω–æ–≤–æ–µ –º–æ—Ä–µ, –≥–ª—é—Ç–µ–Ω–æ–≤–∞—è –∑–µ–ª–µ–Ω—å, –≥–ª—é—Ç–µ–Ω–æ–≤—ã–π –≤–µ—Ä–±–ª—é–¥. –ì–ª—é—Ç–µ–Ω–æ–≤—ã–µ –º–∞–º—ã –≥–ª—é—Ç–µ–Ω–æ–≤—ã–º —Ä–µ–±—è—Ç–∞–º –≥–ª—é—Ç–µ–Ω–æ–≤—ã–µ –ø–µ—Å–Ω–∏ –≥–ª—é—Ç–µ–Ω–æ–≤–æ –ø–æ—é—Ç.'
    ]
    say(user_id, 'üçû %s' % (random.choice(replies)))

@task((r'–∞+–º', r'–ø—Ä–∏+–ø', r'–ø–∏+–ø', r'—à–∏+—à'))
def process_meme_pitash(user_id, txt):
    replies = [
        '–ê–º –ø—Ä–∏–ø.',
        '–ü–∏–∏–ø —à–∏–∏—à.',
        'ü§õ –ù—É –ø—Ä–∏–≤–µ—Ç!',
        '–ü—Ä–∏–≤–µ—Ç, —Ç–æ–Ω–∫–∏–π!'
    ]
    say(user_id, 'üëã %s' % (random.choice(replies)))

@task((r'—ç–±—Å–æ–ª—é—Ç–ª–∏ —Ä–∞–π—Ç', r'–∫–ª–∞—Å—Å?–∏–∫', r'–π–µ—Å'))
def process_meme_soldatov(user_id, txt):
    replies = [
        '–≠–±—Å–∞–ª—é—Ç–ª–∏ —Ä–∞–π—Ç.',
        '–û–æ, –≤—ã –∏–∑ –ê–Ω–≥–ª–∏–∏?'
    ]
    say(user_id, 'üá¨üáß %s' % (random.choice(replies)))

@task((r'.*?(–∫—É—Ä|–¥—ã–º)(–∏—à—å|–∏–º|–∏—Ç—å|–∏–ª|–∏–ª–∞)'))
def process_meme_smoking(user_id, txt):
    replies = [
        '–ú–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ê–ª—å-–§–∞–∫–µ—Ä, —á—Ç–æ–± –ø–æ–∫—Ä–µ–ø—á–µ. –ß–µ–≥–æ-–Ω–∏–±—É–¥—å —Å–≤–µ–∂–µ–Ω—å–∫–æ–≥–æ.',
        '–£ –Ω–∞—Å —Å–µ–π—á–∞—Å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞, —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞ –≥–¥–µ-—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ.',
        '–¢–∞–º –ú–∏—à–∞ –ø–æ–∫–∞ —Å–ø–∏—Ç, –ø–æ–≥–æ–¥–∏—Ç–µ —á–∞—Å–∏–∫–∞ –ø–æ–ª.',
        '–í –ù–∞—Ä–¥–∂—É? –ò–ª–∏ –≤ –ö–∞—Ä—Ç–µ–ª—å?',
        '–ü–æ–¥—Ä–∞–∑–≤–µ–∑–ª–æ.'
    ]
    say(user_id, 'üå´ %s' % (random.choice(replies)))

@task((r'–Ω—É'))
def process_meme_nu(user_id, txt):
    say(user_id, '', extra={'attachment': 'audio33517630_456239323'})

@task((r'–º–∞—à–∞–ª+–∞', r'–∏–Ω—à–∞–ª+–∞', r'–∞–ª—å(—Ö|h)–∞–º–¥—É–ª–∏–ª+–∞', r'–±–∏—Å–º–∏–ª+–∞'))
def process_meme_islam(user_id, txt):
    say(user_id, '!ÿ®Ÿêÿ≥ŸíŸÖŸê ÿßŸÑŸÑŸáŸê ÿßŸÑÿ±ŸëŸéÿ≠ŸíŸÖŸÜŸê ÿßŸÑÿ±ŸëŸéÿ≠ŸêŸäŸÖŸê ‚ò™')

@task((r'.*?–∞–Ω—Ç–∏—Ö–∞–π–ø', r'–±—Ä+—è'))
def process_meme_antihype(user_id, txt):
    replies = [
        '–ë—Ä—Ä—Ä—Ä—Ä—Ä—Ä—Ä—Ä—Ä—Ä—è!',
        '–ê–Ω—Ç–∏—Ö–∞–π–ø.',
        '–†–∞—É–Ω–¥!',
    ]
    say(user_id, 'üéµ %s' % (random.choice(replies)))

def process_unknown(user_id, txt):
    say(user_id, 'ü§∑‚Äç‚ôÄÔ∏è –ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´%s¬ª. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å –∏–Ω–∞—á–µ, –∏–ª–∏ —Å–æ–æ–±—â–∏ –æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –ò–ª—å–µ, –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∫–∏–∫—É.' % (txt))

def process_stickers(user_id, sticker_id):
    stickers = [4539, 4522, 86, 1]
    say(user_id, '', extra={'sticker_id': random.choice(stickers)})

def process_tasks(user_id, txt):
    for key in tasks:
        if isinstance(key, tuple):
            for pat in key:
                if re.match(pat, txt.lower()):
                    tasks[key](user_id, txt)
                    return
        else:
            if re.match(key, txt.lower()):
                tasks[key](user_id, txt)
                return
    process_unknown(user_id, txt)

def say(user_id, txt, extra={}):
    send = {'user_id': user_id, 'message': txt}
    send.update(extra)
    vk.method('messages.send', send)

def main():
    try:
        while True:
            response = vk.method('messages.get', {'out': 0, 'count': 1})
            for item in response['items']:
                # Check if this message has been processed already
                txt = item[u'body']
                user_id = item[u'user_id']
                last_id = state.get('%d/last_id' % (user_id), default=0)
                if item[u'id'] <= last_id: # Do not process old messages
                    continue
                # Do not process read messages older than 15 seconds
                if item[u'read_state'] == 1 and datetime.datetime.now() - item[u'date'] > 15:
                    continue
                if item[u'out'] == 1: # Do not process outbound messages
                    continue

                if (txt == ''):
                    if item[u'attachments'][0][u'type'] == u'sticker':
                        process_stickers(user_id, item[u'attachments'][0][u'sticker'][u'id'])
                else:
                    process_tasks(item[u'user_id'], txt)

                state.set('%d/last_id' % (user_id), item[u'id'])
            time.sleep(1)
    except KeyboardInterrupt:
        state.save()
    except Exception as e:
        print('Caught exception:')
        ln = sys.exc_info()[-1].tb_lineno
        print('line %d: %s' % (ln, e))
        state.set('%d/last_id' % (user_id), item[u'id'])
        try:
            say(user_id, 'üõ† –ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. '
                '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –º–æ–µ–º—É '
                '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.'
                '\n\n'
                '–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ %d: %s' % (ln, e))
        except:
            pass
        main()

if __name__ == '__main__':
    main()
